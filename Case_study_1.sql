create database casestudy1;
use casestudy1;

---checking the tables after importing
select * from [fact];
select * from [Product];
select * from [Location];

----------------------------------------------SQL CASE STUDY 1-------------------------------------------------------------------------------
--1. Display the number of states present in the LocationTable. 
select count(distinct state) as Num_of_states from [Location];

--2. How many products are of regular type?
select count(type) as num_of_prods 
from [Product]
where type = 'Regular';

--3. How much spending has been done on marketing of product ID 1?
select sum(marketing) as total_marketing 
from [fact]
where productid = 1;

--4. What is the minimum sales of a product?
select min(sales) as Min_Sales from [fact];

--5. Display the max Cost of Good Sold (COGS). 
select max(COGS) as max_cogs from [fact];


--6. Display the details of the product where product type is coffee. 
select * from [Product]
where Product_Type = 'Coffee';

--7. Display the details where total expenses are greater than 40. 
select * from [fact]
where Total_Expenses > 40;

--8. What is the average sales in area code 719?
select avg(sales) 
from [fact]
where Area_Code = 719;

--9. Find out the total profit generated by Colorado state.

select SUM(Profit) as Total_profit
from [fact] as F
inner join
[Location] as L
on F.Area_Code = L.Area_Code
where state = 'Colorado';

--10. Display the average inventory for each product ID. 

select avg(inventory) as Avg_invent, productid
from [fact]
group by Productid
order by ProductId ;

--11. Display state in a sequential order in a Location Table. 
select distinct(state) 
from [Location]
order by state;

--12. Display the average budget of the Product where the average budget
--margin should be greater than 100. 
select ProductId, avg(budget_margin) as Avg_budget
from [fact]
group by ProductId
having avg(budget_margin) > 100
order by ProductId;

--13. What is the total sales done on date 2010-01-01?
select sum(sales) as Total_sales
from [fact]
where date = '2010-01-01';

--14. Display the average total expense of each product ID on an individual date. 
select date, productid, avg(total_expenses) as total
from [fact]
group by date, productid
order by date, ProductId;


--15. Display the table with the following attributes such as date, productID, product_type,
--product, sales, profit, state, area_code
select date, F.productID, product_type,
product, sales, profit, state, F.area_code
from [fact] as F
inner join
[Product] as P
on F.ProductId = P.ProductId
inner join
[Location] as L
on F.Area_Code = L.Area_Code;

--16. Display the rank without any gap to show the sales wise rank. 
select sales, 
dense_rank() over (order by sales) as Ranking
from [fact];

--17. Find the state wise profit and sales. 
select state, sum(profit) as Total_profit, sum(sales) as Total_sales
from [fact] as F
inner join
[Location] as L
on F.Area_Code = L.Area_Code
group by State;


--18. Find the state wise profit and sales along with the productname.
select state, product,
sum(profit) as Total_profit, 
sum(sales) as Total_sales
from [fact] as F
inner join
[Location] as L
on F.Area_Code = L.Area_Code
inner join
[Product] as P
on F.ProductId = P.ProductId
group by State, product;




--19. If there is an increase in sales of 5%, calculate the increasedsales.

select sales*1.05 as increased_sales from fact;

--20. Find the maximum profit along with the product ID and producttype

---Product ID and Producttype wise maximum profit
select f.productid,p.product_type, max(profit) as profit from fact f
join product p on f.productid = p.productid
group by f.productid,p.product_type;

---ONly showing product iD and Product type of maximum profit
SELECT f.ProductId, p.Product_Type, f.profit
FROM fact f
INNER JOIN product p ON f.ProductId = p.ProductId
WHERE f.Profit = (SELECT MAX(Profit) FROM fact);


--21./*Create a stored procedure to fetch the result according to the product type from Product Table.*/

CREATE PROCEDURE FetchProductsByType
    @ProductType VARCHAR(100)
AS
BEGIN
    SET NOCOUNT ON;

    SELECT *
    FROM Product
    WHERE Product_Type = @ProductType;
END;
-- Calling the procedure
EXEC FetchProductsByType 'Espresso';

--22./*Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss*/

select *, 
case when total_expenses < 60 then 'Profit'
else 'loss' end as Expense_category
from fact


--23 /*Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchial order*/

SELECT 
    DATEPART(week, f.Date) AS Week_Number,
    f.Date,
    f.ProductId,
    SUM(f.Sales) AS Weekly_Sales
FROM 
    fact f
GROUP BY 
    DATEPART(week, f.Date), f.Date, f.ProductId WITH ROLLUP;

-- 24 /* Apply union and intersection operator on the tables which consist of attribute area code*/

-- UNION operator combines the results of two queries and removes duplicates
SELECT Area_Code FROM fact
UNION
SELECT Area_Code FROM location;

-- INTERSECT operator returns the intersection of the results of two queries
SELECT Area_Code FROM fact
INTERSECT
SELECT Area_Code FROM location;


--25 Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference.

CREATE FUNCTION dbo.GetProductsByType
(
    @ProductType VARCHAR(100)
)
RETURNS TABLE
AS
RETURN
(
    SELECT *
    FROM Product
    WHERE Product_Type = @ProductType
);

--- calling the function
SELECT * FROM dbo.GetProductsByType('Espresso');

--26/*Change the product type from coffee to tea where product ID is 1 and undo it*/
BEGIN TRANSACTION;

UPDATE Product
SET Product_Type = 'Tea'
WHERE ProductId = 1;


ROLLBACK TRANSACTION;


--27 Display the date, product ID and sales where total expenses are between 100 to 200

SELECT Date, ProductId, Sales
FROM fact
WHERE Total_Expenses BETWEEN 100 AND 200;

--28 Delete the records in the Product Table for regular type

DELETE FROM Product
WHERE Type = 'Regular';

--29 Display the ASCII value of the fifth character from the columnProd

SELECT ASCII(SUBSTRING(Product, 5, 1)) AS Fifth_Character_ASCII
FROM product;
